{"version":3,"sources":["components/PostViewer.js","components/AutoCompleteText.js","components/FilterDeals.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["GET_POSTS","gql","props","query","variables","location","dayOfWeek","loading","data","posts","length","id","className","map","post","from","opacity","marginTop","to","style","key","description","companyName","paddingRight","address","AutoCompleteText","onTextChanged","e","value","target","suggestions","regex","RegExp","items","sort","filter","v","test","setState","text","handleLocationSelect","handleSelect","state","this","item","onClick","type","name","onKeyPress","handleChange","renderSuggestions","React","Component","FilterDeals","predictions","onChange","bind","toLowerCase","indexOf","clearTimeout","timeout","setTimeout","getPredictions","role","data-toggle","aria-haspopup","aria-expanded","setPosts","aria-labelledby","handleDayChange","Footer","currentDay","Date","getDay","App","undefined","console","log","f","PostViewer","Boolean","window","hostname","match","client","ApolloClient","uri","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.325b636f.chunk.js","sourcesContent":["import React from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport '../stylesheet.scss';\r\nimport { Spring } from \"react-spring/renderprops\";\r\nexport const GET_POSTS = gql`\r\n  query GET_POSTS($location: String, $dayOfWeek: String){\r\n    posts(location: $location dayOfWeek: $dayOfWeek) {\r\n      id\r\n      location\r\n      description\r\n      companyName\r\n    }\r\n  }\r\n`;\r\n\r\nexport default (props) => (\r\n  <Query query={GET_POSTS} variables={{ location: props.location, dayOfWeek: props.dayOfWeek}}>\r\n    {({ loading, data }) => !loading && (\r\n        <>\r\n          {data.posts.length > 0 ? (<h4 id=\"tagline\">{props.location.length > 0 ? data.posts.length + ' d' : 'D'}eal{data.posts.length > 1 && 's'} {props.location.length > 0 && 'in '}<span className=\"location\">{props.location}</span> for {props.dayOfWeek}</h4>) : (<h4 id=\"tagline\">No results for '{props.location}'. Try again?</h4>)}\r\n          <div id=\"card-wrapper\">\r\n            {data.posts.map(post => {\r\n              return (\r\n                <Spring\r\n                from={{opacity: 0, marginTop: -15}}\r\n                to={{opacity:1, marginTop: 0}}>\r\n                  {props => (\r\n                    <div id=\"card\" style={props} key={post.id}>\r\n                      <div className=\"info\">\r\n                        <h2 className=\"description\">{post.description}</h2>\r\n                        <h3 className=\"companyName\">{post.companyName}</h3>\r\n                        <h4 className=\"location\"><i className=\"fas fa-map-marker-alt\" style={{paddingRight: '.5rem'}}></i>{post.location}</h4>\r\n                        <h4 className=\"address\">{post.address}</h4>\r\n                      </div>\r\n                      <div className=\"directions\">\r\n                        <i className=\"fas fa-directions\"></i>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </Spring>\r\n                \r\n                \r\n                    )\r\n            })}\r\n            \r\n          </div>\r\n        </>\r\n        \r\n        \r\n    )}\r\n    \r\n  </Query>\r\n);","import React from 'react';\r\n\r\nexport default class AutoCompleteText extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.items = [\r\n                        'North End', \r\n                        'Cambridge', \r\n                        'South End', \r\n                        'Back Bay',\r\n                        \"Copley Square\",\r\n                        \"Harvard Square\",\r\n                        \"Financial District\",\r\n                        \"Fenway/Kenmore\",\r\n                        \"Somerville\",\r\n                        \"Brighton\",\r\n                        \"Davis Square\",\r\n                        \"Allston\",\r\n                        \"Beacon Hill\",\r\n                        \"Chinatown\",\r\n                        \"Bay Village\",\r\n                        \"Downtown\",\r\n                        \"West End\",\r\n                        \"Roxbury\",\r\n                        \"Dorchester\",\r\n                        \"Roslindale\",\r\n                        \"Mattapan\",\r\n                        \"Hyde Park\",\r\n                        \"West Roxbury\",\r\n                        \"Jamaica Plain\",\r\n                        \"Mission Hill\",\r\n                        \"South Boston\",\r\n                        \"Charlestown\",\r\n                        \"East Boston\",\r\n                        \"Mid Dorchester\",\r\n\r\n                    ];\r\n        this.state = {\r\n            suggestions: [''],\r\n            text: \"\"\r\n        };\r\n    }\r\n    \r\n    onTextChanged = (e) => {\r\n        const value = e.target.value;\r\n        let suggestions = [];\r\n        if (value.length > 0) {\r\n            const regex = new RegExp(`^${value}`, 'i');\r\n            suggestions = this.items.sort().filter(v => regex.test(v))\r\n        }\r\n        this.props.onTextChanged(suggestions, value);\r\n        this.setState(() => ({ suggestions, text: value }));\r\n         \r\n    }\r\n\r\n\r\n    renderSuggestions () {\r\n        const { suggestions } = this.props;\r\n\r\n        if (suggestions.length === 0) {\r\n            return null;\r\n        }\r\n        return (\r\n            <ul>\r\n                {suggestions.map((item) => <li onClick={() => this.handleLocationSelect(item)}><i className=\"fas fa-search\"></i>{item}</li>)}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    handleLocationSelect = (value) => {\r\n        this.setState(() => ({\r\n            text: value,\r\n            suggestions: []\r\n        }));\r\n        let suggestions = [];\r\n        this.props.onTextChanged(suggestions, value);\r\n        this.props.handleSelect(value);\r\n        \r\n    }\r\n\r\n    render () {\r\n        const value = this.props.value;\r\n        return (\r\n            <div id=\"locationSelector\" >\r\n                <input  type=\"text\" \r\n                        name=\"location\"\r\n                        onKeyPress={this.props.handleChange} \r\n                        type=\"text\"\r\n                        onChange={this.onTextChanged}\r\n                        value={value}\r\n                        />\r\n\r\n                {this.renderSuggestions()}\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport AutoCompleteText from './AutoCompleteText';\r\n\r\nconst INPUT_TIMEOUT = 250;\r\n\r\nclass FilterDeals extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: '',\r\n            predictions: []\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    getPredictions(value) {\r\n\r\n        return [\r\n            'Fenway/Kenmore',\r\n            'Back Bay',\r\n            'Brighton',\r\n            'North End',\r\n            'South End',\r\n            'Cambridge',\r\n            'Somerville',\r\n            'Financial District',\r\n            'Harvard Square',\r\n            'Copley Square'\r\n        ].filter(item => item.toLowerCase().indexOf(value.toLowerCase()) !== -1);\r\n    }\r\n\r\n    onChange(e) {\r\n        // clear timeout when input changes value\r\n        clearTimeout(this.timeout);\r\n        const value = e.target.value;\r\n        this.setState({\r\n          value: value\r\n        });\r\n        // console.log(this.state.value);\r\n        // console.log(this.state.predictions);\r\n\r\n        if (value.length > 0) {\r\n          // make delayed api call\r\n          this.timeout = setTimeout(() => {\r\n            const predictions = this.getPredictions(value);\r\n            this.setState({\r\n              predictions\r\n            });\r\n          }, INPUT_TIMEOUT);\r\n        } else {\r\n          this.setState({\r\n            predictions: []\r\n          });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"filterDeals\">\r\n\r\n                <AutoCompleteText \r\n                    handleSelect={this.props.handleSelect} \r\n                    handleChange={this.props.handleChange}\r\n                    suggestions={this.props.suggestions}\r\n                    onTextChanged={this.props.onTextChanged}\r\n                    value={this.props.value}\r\n                    />\r\n        \r\n                <div id=\"dayOfWeekSelector\" className=\"dropdown show\">\r\n                    <a className=\"btn btn-secondary dropdown-toggle\" role=\"button\" id=\"dropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" onKeyPress={this.props.setPosts}>\r\n                        {this.props.dayOfWeek}\r\n                    </a>\r\n                    <div name=\"dayOfWeek\" className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuLink\">\r\n                        <option className=\"dropdown-item\" onClick={this.props.handleDayChange}  name=\"dayOfWeek\" value=\"Sunday\">Sunday</option>\r\n                        <option className=\"dropdown-item\" onClick={this.props.handleDayChange}  name=\"dayOfWeek\" value=\"Monday\">Monday</option>\r\n                        <option className=\"dropdown-item\" onClick={this.props.handleDayChange}  name=\"dayOfWeek\" value=\"Tuesday\">Tuesday</option>\r\n                        <option className=\"dropdown-item\" onClick={this.props.handleDayChange}  name=\"dayOfWeek\" value=\"Wednesday\">Wednesday</option>\r\n                        <option className=\"dropdown-item\" onClick={this.props.handleDayChange}  name=\"dayOfWeek\" value=\"Thursday\">Thursday</option>\r\n                        <option className=\"dropdown-item\" onClick={this.props.handleDayChange}  name=\"dayOfWeek\" value=\"Friday\">Friday</option>\r\n                        <option className=\"dropdown-item\" onClick={this.props.handleDayChange}  name=\"dayOfWeek\" value=\"Saturday\">Saturday</option>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilterDeals;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <div className=\"footer\">\r\n                <h5>BOSTONS DEALS</h5>\r\n            </div>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\n\r\nimport PostViewer from './components/PostViewer';\r\nimport FilterDeals from './components/FilterDeals';\r\nimport Footer from './components/Footer'\r\n\r\nconst d = new Date();\r\nconst weekdays = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]\r\nconst currentDay = weekdays[d.getDay()]\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    location: \"\",\r\n    dayOfWeek: currentDay,\r\n    posts: [],\r\n    suggestions: [],\r\n    value: \"\",\r\n  };\r\n\r\n  posts = []\r\n\r\n  handleChange = (e) => {\r\n    if(e.key === 'Enter') {\r\n\r\n      let value = this.state.suggestions[0];\r\n\r\n      if(value === undefined) {\r\n        value = e.target.value;\r\n      }\r\n\r\n      this.setState({value, location: value});\r\n      this.setState({suggestions: []});\r\n\r\n      if (value === undefined) {\r\n        value = e.target.value;\r\n      }\r\n      \r\n      this.setState({value: this.state.suggestions[0], location: value});\r\n      this.setState({suggestions: []}, console.log(value));\r\n\r\n      \r\n      // Old handler for enter key, revert if new way breaks\r\n      // this.setState({[e.target.name]: e.target.value });\r\n      \r\n    }\r\n  };\r\n\r\n  handleDayChange (f) {\r\n    this.setState({dayOfWeek: f.target.value});\r\n  };\r\n\r\n  handleSelect = (location) => {\r\n    this.setState({location});\r\n  }\r\n\r\n  onTextChanged (suggestions, value, location) {\r\n    this.setState({suggestions, value});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <main className=\"bg-img\">\r\n          <h1 className=\"header\" id=\"header\">Boston's Deals</h1>\r\n          <FilterDeals \r\n              handleDayChange={this.handleDayChange.bind(this)} \r\n              handleChange={this.handleChange.bind(this)} \r\n              dayOfWeek={this.state.dayOfWeek}\r\n              location={this.state.location}\r\n              posts={this.posts}\r\n              handleSelect={this.handleSelect.bind(this)}\r\n              suggestions={this.state.suggestions}\r\n              onTextChanged={this.onTextChanged.bind(this)}\r\n              value={this.state.value}\r\n              />\r\n\r\n          <PostViewer \r\n            dayOfWeek={this.state.dayOfWeek}\r\n            location={this.state.location}\r\n            posts={this.state.posts}\r\n            />\r\n        </main>\r\n        <Footer />\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { ApolloProvider } from 'react-apollo';\r\nimport ApolloClient from 'apollo-boost';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst client = new ApolloClient({\r\n    uri: \"http://localhost:4000\"\r\n});\r\n\r\nReactDOM.render(\r\n    <ApolloProvider client={client}>\r\n        <App />\r\n    </ApolloProvider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\nif (module.hot) module.hot.accept();"],"sourceRoot":""}