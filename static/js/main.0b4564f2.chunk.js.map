{"version":3,"sources":["components/PostViewer.js","components/FilterDeals.js","App.js","serviceWorker.js","apollo.js","index.js"],"names":["GET_POSTS","gql","props","query","variables","location","dayOfWeek","loading","data","posts","map","post","id","className","description","companyName","class","style","paddingRight","address","FilterDeals","type","name","onChange","this","handleChange","placeholder","href","role","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","onClick","handleDayChange","value","Component","currentDay","Date","getDay","App","state","food","weekdays","e","setState","target","f","bind","PostViewer","Boolean","window","hostname","match","ApolloClient","uri","ReactDOM","render","client","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b4564f2.chunk.js","sourcesContent":["import React from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport '../stylesheet.scss';\r\n\r\nexport const GET_POSTS = gql`\r\n  query GET_POSTS($location: String, $dayOfWeek: String){\r\n    posts(location: $location dayOfWeek: $dayOfWeek) {\r\n      id\r\n      location\r\n      description\r\n      companyName\r\n    }\r\n  }\r\n`;\r\n\r\nexport default (props) => (\r\n  <Query query={GET_POSTS} variables={{ location: props.location, dayOfWeek: props.dayOfWeek}}>\r\n    {({ loading, data }) => !loading && (\r\n        <div>\r\n            {data.posts.map(post => (\r\n              <div id=\"card\">\r\n                <div className=\"info\">\r\n                  <h2 className=\"description\">{post.description}</h2>\r\n                  <h3 className=\"companyName\">{post.companyName}</h3>\r\n                  <h4 className=\"location\"><i class=\"fas fa-map-marker-alt\" style={{paddingRight: '.5rem'}}></i>{post.location}</h4>\r\n                  <h4 className=\"address\">{post.address}</h4>\r\n                </div>\r\n                <div className=\"directions\">\r\n                  <i class=\"fas fa-directions\"></i>\r\n                </div>\r\n              </div>\r\n            ))} \r\n        </div>\r\n        \r\n    )}\r\n  </Query>\r\n);","import React, { Component } from 'react';\r\n\r\nclass FilterDeals extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"filterDeals\">\r\n                <input id=\"locationSelector\" type=\"text\" name=\"location\" onChange={this.props.handleChange} placeholder=\"Enter location...\"/>\r\n                {/* <input type=\"text\" name=\"dayOfWeek\" onChange={this.props.handleChange} /> */}\r\n        \r\n                <div id=\"dayOfWeekSelector\" class=\"dropdown show\">\r\n                    <a class=\"btn btn-secondary dropdown-toggle\" href=\"#\" role=\"button\" id=\"dropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                        {this.props.dayOfWeek}\r\n                    </a>\r\n                    <div name=\"dayOfWeek\" class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuLink\">\r\n                        <option class=\"dropdown-item\" onClick={this.props.handleDayChange}  name=\"dayOfWeek\" value=\"Sunday\">Sunday</option>\r\n                        <option class=\"dropdown-item\" onClick={this.props.handleDayChange}  name=\"dayOfWeek\" value=\"Monday\">Monday</option>\r\n                        <option class=\"dropdown-item\" onClick={this.props.handleDayChange}  name=\"dayOfWeek\" value=\"Tuesday\">Tuesday</option>\r\n                        <option class=\"dropdown-item\" onClick={this.props.handleDayChange}  name=\"dayOfWeek\" value=\"Wednesday\">Wednesday</option>\r\n                        <option class=\"dropdown-item\" onClick={this.props.handleDayChange}  name=\"dayOfWeek\" value=\"Thursday\">Thursday</option>\r\n                        <option class=\"dropdown-item\" onClick={this.props.handleDayChange}  name=\"dayOfWeek\" value=\"Friday\">Friday</option>\r\n                        <option class=\"dropdown-item\" onClick={this.props.handleDayChange}  name=\"dayOfWeek\" value=\"Saturday\">Saturday</option>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilterDeals;","import React, { Component } from 'react';\n\nimport PostViewer from './components/PostViewer';\nimport FilterDeals from './components/FilterDeals';\n\nconst d = new Date();\nconst weekdays = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]\nconst currentDay = weekdays[d.getDay()]\n\nclass App extends Component {\n\n  state = {\n    location: \"\",\n    dayOfWeek: currentDay,\n    food: true,\n    weekdays: [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]\n  };\n\n  handleChange (e) {\n    this.setState({[e.target.name]: e.target.value });\n  }\n\n  handleDayChange (f) {\n    this.setState({dayOfWeek: f.target.value});\n  }\n\n  render() {\n    return (\n      <main>\n        <h1 className=\"header\">Boston's Deals</h1>\n        <FilterDeals \n            handleDayChange={this.handleDayChange.bind(this)} \n            handleChange={this.handleChange.bind(this)} \n            dayOfWeek={this.state.dayOfWeek}/>\n\n        <PostViewer location={this.state.location} dayOfWeek={this.state.dayOfWeek}/>\n      </main>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ApolloClient from 'apollo-boost';\r\n\r\nexport default new ApolloClient({\r\n  uri: \"http://localhost:4000/graphql\",\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport client from './apollo';\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\nif (module.hot) module.hot.accept();"],"sourceRoot":""}