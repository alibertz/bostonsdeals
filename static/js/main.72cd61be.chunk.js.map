{"version":3,"sources":["components/PostViewer.js","components/AutoCompleteText.js","components/FilterDeals.js","components/Footer.js","App.js","serviceWorker.js","apollo.js","index.js"],"names":["GET_POSTS","gql","props","query","variables","location","dayOfWeek","loading","data","id","posts","length","className","map","post","key","description","companyName","style","paddingRight","address","AutoCompleteText","onTextChanged","e","value","target","suggestions","regex","RegExp","items","sort","filter","v","test","setState","text","handleLocationSelect","handleSelect","state","this","item","onClick","class","type","name","onKeyPress","handleChange","renderSuggestions","React","Component","FilterDeals","predictions","onChange","bind","toLowerCase","indexOf","clearTimeout","timeout","setTimeout","getPredictions","href","role","data-toggle","aria-haspopup","aria-expanded","setPosts","aria-labelledby","handleDayChange","Footer","currentDay","Date","getDay","App","f","PostViewer","Boolean","window","hostname","match","ApolloClient","uri","ReactDOM","render","client","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72cd61be.chunk.js","sourcesContent":["import React from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport '../stylesheet.scss';\r\n\r\nexport const GET_POSTS = gql`\r\n  query GET_POSTS($location: String, $dayOfWeek: String){\r\n    posts(location: $location dayOfWeek: $dayOfWeek) {\r\n      id\r\n      location\r\n      description\r\n      companyName\r\n    }\r\n  }\r\n`;\r\n\r\nexport default (props) => (\r\n  <Query query={GET_POSTS} variables={{ location: props.location, dayOfWeek: props.dayOfWeek}}>\r\n    {({ loading, data }) => !loading && (\r\n        <div id=\"card-wrapper\">\r\n        {data.posts.length > 0 ? (<h4 id=\"tagline\">{props.location.length > 0 ? data.posts.length + ' d' : 'D'}eal{data.posts.length > 1 && 's'} {props.location.length > 0 && 'in '}<span className=\"location\">{props.location}</span> for {props.dayOfWeek}</h4>) : (<h4 id=\"tagline\">No results for '{props.location}'. Try again?</h4>)}\r\n          {data.posts.map(post => {\r\n            return (<div id=\"card\" key={post.id}>\r\n                      <div className=\"info\">\r\n                        <h2 className=\"description\">{post.description}</h2>\r\n                        <h3 className=\"companyName\">{post.companyName}</h3>\r\n                        <h4 className=\"location\"><i className=\"fas fa-map-marker-alt\" style={{paddingRight: '.5rem'}}></i>{post.location}</h4>\r\n                        <h4 className=\"address\">{post.address}</h4>\r\n                      </div>\r\n                      <div className=\"directions\">\r\n                        <i className=\"fas fa-directions\"></i>\r\n                      </div>\r\n                    </div>\r\n                  )\r\n          })}\r\n          \r\n        </div>\r\n        \r\n    )}\r\n    \r\n  </Query>\r\n);","import React from 'react';\r\n\r\nexport default class AutoCompleteText extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.items = [\r\n                        'North End', \r\n                        'Cambridge', \r\n                        'South End', \r\n                        'Back Bay',\r\n                        \"Copley Square\",\r\n                        \"Harvard Square\",\r\n                        \"Financial District\",\r\n                        \"Fenway/Kenmore\",\r\n                        \"Somerville\",\r\n                        \"Brighton\",\r\n                        \"Davis Square\",\r\n                        \"Allston\",\r\n                        \"Beacon Hill\",\r\n                        \"Chinatown\",\r\n                        \"Bay Village\",\r\n                        \"Downtown\",\r\n                        \"West End\",\r\n                        \"Roxbury\",\r\n                        \"Dorchester\",\r\n                        \"Roslindale\",\r\n                        \"Mattapan\",\r\n                        \"Hyde Park\",\r\n                        \"West Roxbury\",\r\n                        \"Jamaica Plain\",\r\n                        \"Mission Hill\",\r\n                        \"South Boston\",\r\n                        \"Charlestown\",\r\n                        \"East Boston\",\r\n                        \"Mid Dorchester\",\r\n\r\n                    ];\r\n        this.state = {\r\n            suggestions: [],\r\n            text: \"\"\r\n        };\r\n    }\r\n    \r\n    onTextChanged = (e) => {\r\n        const value = e.target.value;\r\n        let suggestions = [];\r\n        if (value.length > 0) {\r\n            const regex = new RegExp(`^${value}`, 'i');\r\n            suggestions = this.items.sort().filter(v => regex.test(v))\r\n        }\r\n        this.props.onTextChanged(suggestions, value);\r\n        this.setState(() => ({ suggestions, text: value }));\r\n         \r\n    }\r\n\r\n\r\n    renderSuggestions () {\r\n        const { suggestions } = this.props;\r\n        if (suggestions.length === 0) {\r\n            return null;\r\n        }\r\n        return (\r\n            <ul>\r\n                {suggestions.map((item) => <li onClick={() => this.handleLocationSelect(item)}><i class=\"fas fa-search\"></i>{item}</li>)}\r\n            </ul>\r\n        );\r\n    }\r\n\r\n    handleLocationSelect = (value) => {\r\n        this.setState(() => ({\r\n            text: value,\r\n            suggestions: []\r\n        }));\r\n        let suggestions = [];\r\n        this.props.onTextChanged(suggestions, value);\r\n        this.props.handleSelect(value);\r\n        \r\n    }\r\n\r\n    render () {\r\n        const { value } = this.props;\r\n        return (\r\n            <div id=\"locationSelector\" >\r\n                <input  type=\"text\" \r\n                        name=\"location\"\r\n                        onKeyPress={this.props.handleChange} \r\n                        type=\"text\"\r\n                        onChange={this.onTextChanged}\r\n                        value={value}\r\n                        />\r\n\r\n                {this.renderSuggestions()}\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport AutoCompleteText from './AutoCompleteText';\r\n\r\nconst INPUT_TIMEOUT = 250;\r\n\r\nclass FilterDeals extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: '',\r\n            predictions: []\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    getPredictions(value) {\r\n\r\n        return [\r\n            'Fenway/Kenmore',\r\n            'Back Bay',\r\n            'Brighton',\r\n            'North End',\r\n            'South End',\r\n            'Cambridge',\r\n            'Somerville',\r\n            'Financial District',\r\n            'Harvard Square',\r\n            'Copley Square'\r\n        ].filter(item => item.toLowerCase().indexOf(value.toLowerCase()) !== -1);\r\n    }\r\n\r\n    onChange(e) {\r\n        // clear timeout when input changes value\r\n        clearTimeout(this.timeout);\r\n        const value = e.target.value;\r\n        this.setState({\r\n          value: value\r\n        });\r\n        // console.log(this.state.value);\r\n        // console.log(this.state.predictions);\r\n\r\n        if (value.length > 0) {\r\n          // make delayed api call\r\n          this.timeout = setTimeout(() => {\r\n            const predictions = this.getPredictions(value);\r\n            this.setState({\r\n              predictions\r\n            });\r\n          }, INPUT_TIMEOUT);\r\n        } else {\r\n          this.setState({\r\n            predictions: []\r\n          });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"filterDeals\">\r\n\r\n                <AutoCompleteText \r\n                    handleSelect={this.props.handleSelect} \r\n                    handleChange={this.props.handleChange}\r\n                    suggestions={this.props.suggestions}\r\n                    onTextChanged={this.props.onTextChanged}\r\n                    value={this.props.value}\r\n                    />\r\n        \r\n                <div id=\"dayOfWeekSelector\" className=\"dropdown show\">\r\n                    <a className=\"btn btn-secondary dropdown-toggle\" href=\"#\" role=\"button\" id=\"dropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" onKeyPress={this.props.setPosts}>\r\n                        {this.props.dayOfWeek}\r\n                    </a>\r\n                    <div name=\"dayOfWeek\" className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuLink\">\r\n                        <option className=\"dropdown-item\" onClick={this.props.handleDayChange}  name=\"dayOfWeek\" value=\"Sunday\">Sunday</option>\r\n                        <option className=\"dropdown-item\" onClick={this.props.handleDayChange}  name=\"dayOfWeek\" value=\"Monday\">Monday</option>\r\n                        <option className=\"dropdown-item\" onClick={this.props.handleDayChange}  name=\"dayOfWeek\" value=\"Tuesday\">Tuesday</option>\r\n                        <option className=\"dropdown-item\" onClick={this.props.handleDayChange}  name=\"dayOfWeek\" value=\"Wednesday\">Wednesday</option>\r\n                        <option className=\"dropdown-item\" onClick={this.props.handleDayChange}  name=\"dayOfWeek\" value=\"Thursday\">Thursday</option>\r\n                        <option className=\"dropdown-item\" onClick={this.props.handleDayChange}  name=\"dayOfWeek\" value=\"Friday\">Friday</option>\r\n                        <option className=\"dropdown-item\" onClick={this.props.handleDayChange}  name=\"dayOfWeek\" value=\"Saturday\">Saturday</option>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilterDeals;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <div className=\"footer\">\r\n                <h5>BOSTONS DEALS</h5>\r\n            </div>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\n\r\nimport PostViewer from './components/PostViewer';\r\nimport FilterDeals from './components/FilterDeals';\r\nimport Footer from './components/Footer'\r\n\r\nconst d = new Date();\r\nconst weekdays = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]\r\nconst currentDay = weekdays[d.getDay()]\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n\r\n  state = {\r\n    location: \"\",\r\n    dayOfWeek: currentDay,\r\n    posts: [],\r\n    suggestions: [],\r\n    value: \"\",\r\n  };\r\n\r\n  posts = []\r\n\r\n  handleChange = (e) => {\r\n    if(e.key === 'Enter') {\r\n\r\n      this.setState({value: this.state.suggestions[0], location: this.state.suggestions[0]});\r\n      this.setState({suggestions: []});\r\n\r\n      // Old handler for enter key, revert if new way breaks\r\n      // this.setState({[e.target.name]: e.target.value });\r\n      \r\n    }\r\n  };\r\n\r\n  handleDayChange (f) {\r\n    this.setState({dayOfWeek: f.target.value});\r\n  };\r\n\r\n  handleSelect = (location) => {\r\n    this.setState({location});\r\n  }\r\n\r\n  onTextChanged (suggestions, value) {\r\n    this.setState({suggestions, value});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <main className=\"bg-img\">\r\n          <h1 className=\"header\" id=\"header\">Boston's Deals</h1>\r\n          <FilterDeals \r\n              handleDayChange={this.handleDayChange.bind(this)} \r\n              handleChange={this.handleChange.bind(this)} \r\n              dayOfWeek={this.state.dayOfWeek}\r\n              location={this.state.location}\r\n              posts={this.posts}\r\n              handleSelect={this.handleSelect.bind(this)}\r\n              suggestions={this.state.suggestions}\r\n              onTextChanged={this.onTextChanged.bind(this)}\r\n              value={this.state.value}\r\n              />\r\n\r\n          <PostViewer \r\n            dayOfWeek={this.state.dayOfWeek}\r\n            location={this.state.location}\r\n            posts={this.state.posts}\r\n            />\r\n        </main>\r\n        <Footer />\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ApolloClient from 'apollo-boost';\r\n\r\nexport default new ApolloClient({\r\n  uri: \"http://localhost:4000/graphql\",\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport client from './apollo';\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\nif (module.hot) module.hot.accept();"],"sourceRoot":""}